<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>弗洛伊德算法（邻接矩阵结构）</title>
      <link href="/blogs/572bb11e123/"/>
      <url>/blogs/572bb11e123/</url>
      <content type="html"><![CDATA[<blockquote><p>关于图的邻接矩阵结构的最短路径算法</p></blockquote><h1 id="构建的邻接矩阵如下："><a href="#构建的邻接矩阵如下：" class="headerlink" title="构建的邻接矩阵如下："></a>构建的邻接矩阵如下：</h1><p><img src="/images/Floyd.png" alt="构建的邻接矩阵"><br><a id="more"></a></p><h1 id="源码如下："><a href="#源码如下：" class="headerlink" title="源码如下："></a>源码如下：</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#define maxSize 100</span><br><span class="line">typedef struct VertexType&#123;</span><br><span class="line">int no;</span><br><span class="line">char data;</span><br><span class="line">&#125;VertexType;</span><br><span class="line">typedef struct MGraph&#123;</span><br><span class="line">int edges[maxSize][maxSize];</span><br><span class="line">int n,e;</span><br><span class="line">VertexType vex[maxSize];</span><br><span class="line">&#125;MGraph;</span><br><span class="line">MGraph buildMGraph()</span><br><span class="line">&#123;</span><br><span class="line">MGraph mg;</span><br><span class="line">mg.n=4;</span><br><span class="line">mg.e=7;</span><br><span class="line">int old[4][4]=&#123;&#123;0,5,100,7&#125;,&#123;100,0,4,2&#125;,&#123;3,3,0,2&#125;,&#123;100,100,1,0&#125;&#125;;</span><br><span class="line">int i,k;</span><br><span class="line">for(i=0;i&lt;mg.n;i++)</span><br><span class="line">&#123;</span><br><span class="line">for(k=0;k&lt;mg.n;k++)</span><br><span class="line">&#123;</span><br><span class="line">mg.edges[i][k]=old[i][k];</span><br><span class="line">printf(&quot;%-5d&quot;,old[i][k]);</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">return mg;</span><br><span class="line">&#125;</span><br><span class="line">void Floyd(MGraph g)</span><br><span class="line">&#123;</span><br><span class="line">int A[maxSize][maxSize];</span><br><span class="line">int path[maxSize][maxSize];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int i,j,k;</span><br><span class="line">for(i=0;i&lt;g.n;i++)</span><br><span class="line">&#123;</span><br><span class="line">for(j=0;j&lt;g.n;j++)</span><br><span class="line">&#123;</span><br><span class="line">A[i][j]=g.edges[i][j];</span><br><span class="line">path[i][j]=-1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">for(i=0;i&lt;g.n;i++)</span><br><span class="line">&#123;</span><br><span class="line">for(j=0;j&lt;g.n;j++)</span><br><span class="line">&#123;</span><br><span class="line">for(k=0;k&lt;g.n;k++)</span><br><span class="line">&#123;</span><br><span class="line">if(A[j][k]&gt;A[j][i]+A[i][k])</span><br><span class="line">&#123;</span><br><span class="line">A[j][k]=A[j][i]+A[i][k];</span><br><span class="line">path[j][k]=i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printf(&quot;%s\n&quot;,&quot;A is:&quot;);</span><br><span class="line">for(i=0;i&lt;g.n;i++)</span><br><span class="line">&#123;</span><br><span class="line">for(j=0;j&lt;g.n;j++)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;%-5d&quot;,A[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;%s\n&quot;,&quot;Path  is:&quot;);</span><br><span class="line">for(i=0;i&lt;g.n;i++)</span><br><span class="line">&#123;</span><br><span class="line">for(j=0;j&lt;g.n;j++)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;%5d&quot;,path[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">int (*p)[g.n][g.n]=&amp;path;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void main()</span><br><span class="line">&#123;</span><br><span class="line">MGraph mg=buildMGraph();</span><br><span class="line">Floyd(mg);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="结果如下："><a href="#结果如下：" class="headerlink" title="结果如下："></a>结果如下：</h1><p><img src="/images/Floyd_result.png" alt="结果"></p><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><blockquote></blockquote>]]></content>
      
      <categories>
          
          <category> 数据结构 </category>
          
          <category> 图 </category>
          
          <category> 最小代价生成树 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c语言 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>普里姆算法（邻接矩阵结构）</title>
      <link href="/blogs/572bb11e/"/>
      <url>/blogs/572bb11e/</url>
      <content type="html"><![CDATA[<blockquote><p>关于图的邻接矩阵结构的最小代价生成树算法</p></blockquote><h1 id="构建的邻接矩阵如下："><a href="#构建的邻接矩阵如下：" class="headerlink" title="构建的邻接矩阵如下："></a>构建的邻接矩阵如下：</h1><p><img src="/images/Prim.png" alt="构建的邻接矩阵"><br><a id="more"></a></p><h1 id="源码如下："><a href="#源码如下：" class="headerlink" title="源码如下："></a>源码如下：</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#define maxSize 100</span><br><span class="line">#define IN 100</span><br><span class="line">typedef struct Vertex&#123;</span><br><span class="line">int no;</span><br><span class="line">char data;</span><br><span class="line">&#125;Vertex;</span><br><span class="line"></span><br><span class="line">MGraph buildMGraph()</span><br><span class="line">&#123;</span><br><span class="line">MGraph mg;</span><br><span class="line">mg.n=5;</span><br><span class="line">mg.e=8;</span><br><span class="line">int i;</span><br><span class="line">for(i=0;i&lt;mg.n;i++)</span><br><span class="line">&#123;</span><br><span class="line">mg.vex[i].no=i;</span><br><span class="line">&#125;</span><br><span class="line">int edge[5][5]=&#123;&#123;0,5,1,2,100&#125;,&#123;5,0,3,100,4&#125;,&#123;1,3,0,6,2&#125;,&#123;2,100,6,0,3&#125;,&#123;100,4,2,3,0&#125;&#125;;</span><br><span class="line">int j;</span><br><span class="line">for(i=0;i&lt;5;i++)</span><br><span class="line">&#123;</span><br><span class="line">for(j=0;j&lt;5;j++)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;%-6d&quot;,edge[i][j]);</span><br><span class="line">mg.edges[i][j]=edge[i][j];</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">return mg;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">void Prim(MGraph g,int v0)</span><br><span class="line">&#123;</span><br><span class="line">int lowcost[maxSize],vset[maxSize];</span><br><span class="line">int v,i,j,k,min;</span><br><span class="line">for(i=0;i&lt;g.n;i++)</span><br><span class="line">&#123;</span><br><span class="line">lowcost[i]=g.edges[v0][i];</span><br><span class="line">vset[i]=0;</span><br><span class="line">&#125;</span><br><span class="line">vset[v0]=1;</span><br><span class="line">v=v0;</span><br><span class="line">for(i=0;i&lt;g.n-1;i++)</span><br><span class="line">&#123;</span><br><span class="line">min=INF;</span><br><span class="line">for(j=0;j&lt;g.n;j++)</span><br><span class="line">&#123;</span><br><span class="line">if(vset[j]==0&amp;&amp;lowcost[j]&lt;min)</span><br><span class="line">&#123;</span><br><span class="line">min=lowcost[j];</span><br><span class="line">k=j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printf(&quot;num:%d   pow:%d\n&quot;,k,min);</span><br><span class="line">vset[k]=1;</span><br><span class="line">v=k;</span><br><span class="line">for(j=0;j&lt;g.n;j++)</span><br><span class="line">&#123;</span><br><span class="line">if(vset[j]==0&amp;&amp;lowcost[j]&gt;g.edges[v][j])</span><br><span class="line">&#123;</span><br><span class="line">lowcost[j]=g.edges[v][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">void main()</span><br><span class="line">&#123;</span><br><span class="line">MGraph mg=buildMGraph();</span><br><span class="line">Prim(mg,0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="结果如下："><a href="#结果如下：" class="headerlink" title="结果如下："></a>结果如下：</h1><p><img src="/images/Prim_result.png" alt="结果"></p><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><blockquote></blockquote>]]></content>
      
      <categories>
          
          <category> 数据结构 </category>
          
          <category> 图 </category>
          
          <category> 最小代价生成树 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c语言 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>图的深度优先遍历和广度优先遍历（邻接表结构）</title>
      <link href="/blogs/f1a8c9e2/"/>
      <url>/blogs/f1a8c9e2/</url>
      <content type="html"><![CDATA[<blockquote><p>关于邻接表结构存储图的深度优先遍历和广度优先遍历</p></blockquote><h1 id="构建的邻接表如下："><a href="#构建的邻接表如下：" class="headerlink" title="构建的邻接表如下："></a>构建的邻接表如下：</h1><p><img src="/images/BFS.png" alt="构建的邻接表"><br><a id="more"></a></p><h1 id="源码如下："><a href="#源码如下：" class="headerlink" title="源码如下："></a>源码如下：</h1><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include<span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#define maxSize 100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> ArcNode&#123;</span><br><span class="line"><span class="keyword">int</span> adjvex;</span><br><span class="line"><span class="keyword">struct</span> ArcNode *nextarc;</span><br><span class="line"><span class="keyword">int</span> info;</span><br><span class="line">&#125;ArcNode;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> VNode&#123;</span><br><span class="line">ArcNode *firstarc;</span><br><span class="line"><span class="keyword">char</span> data;</span><br><span class="line">&#125;VNode;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> AGraph&#123;</span><br><span class="line">VNode adjlist[maxSize];</span><br><span class="line"><span class="keyword">int</span> e,n;</span><br><span class="line"></span><br><span class="line">&#125;AGraph;</span><br><span class="line">&lt;!-- more --&gt;</span><br><span class="line">AGraph buildAGraph()</span><br><span class="line">&#123;</span><br><span class="line">AGraph ag;</span><br><span class="line">ag.n=<span class="number">6</span>;</span><br><span class="line">ag.e=<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line">VNode vn;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;ag.n;i++)</span><br><span class="line">&#123;</span><br><span class="line">vn.data=(<span class="keyword">char</span>)(<span class="number">65</span>+i);</span><br><span class="line"><span class="comment">//printf("%c",vn.data);</span></span><br><span class="line">ag.adjlist[i]=vn;</span><br><span class="line">&#125;</span><br><span class="line">ArcNode arc1,arc2,arc3,arc4,arc5,arc6,arc7;</span><br><span class="line">arc1.adjvex=<span class="number">1</span>;</span><br><span class="line">arc1.nextarc=&amp;arc3;</span><br><span class="line">arc2.adjvex=<span class="number">2</span>;</span><br><span class="line">arc2.nextarc=&amp;arc4;</span><br><span class="line"></span><br><span class="line">arc3.adjvex=<span class="number">3</span>;</span><br><span class="line">arc4.adjvex=<span class="number">4</span>;</span><br><span class="line">        arc5.adjvex=<span class="number">4</span>;</span><br><span class="line">arc6.adjvex=<span class="number">3</span>;</span><br><span class="line">        arc7.adjvex=<span class="number">5</span>;</span><br><span class="line">arc3.nextarc=<span class="literal">NULL</span>;</span><br><span class="line">arc4.nextarc=<span class="literal">NULL</span>;</span><br><span class="line">arc5.nextarc=<span class="literal">NULL</span>;</span><br><span class="line">arc6.nextarc=<span class="literal">NULL</span>;</span><br><span class="line">arc7.nextarc=<span class="literal">NULL</span>;</span><br><span class="line">ag.adjlist[<span class="number">0</span>].firstarc=&amp;arc1;</span><br><span class="line">ag.adjlist[<span class="number">1</span>].firstarc=&amp;arc2;</span><br><span class="line">ag.adjlist[<span class="number">2</span>].firstarc=<span class="literal">NULL</span>;</span><br><span class="line">ag.adjlist[<span class="number">3</span>].firstarc=&amp;arc5;</span><br><span class="line">ag.adjlist[<span class="number">4</span>].firstarc=&amp;arc7;</span><br><span class="line">ag.adjlist[<span class="number">5</span>].firstarc=&amp;arc6;</span><br><span class="line"><span class="keyword">return</span> ag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> visit[]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">void</span> DFS(AGraph *G,<span class="keyword">int</span> v)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> content=G-&gt;adjlist[v].data;</span><br><span class="line">printf(<span class="string">"%c"</span>,content);</span><br><span class="line">visit[v]=<span class="number">1</span>;</span><br><span class="line">ArcNode *p=G-&gt;adjlist[v].firstarc;</span><br><span class="line"><span class="keyword">while</span>(p!=<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(visit[p-&gt;adjvex]==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">DFS(G,p-&gt;adjvex);</span><br><span class="line">&#125;</span><br><span class="line">p=p-&gt;nextarc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> Visit[]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">void</span> BFS(AGraph *G,<span class="keyword">int</span> v)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> content=G-&gt;adjlist[v].data;</span><br><span class="line">printf(<span class="string">"%c"</span>,content);</span><br><span class="line">Visit[v]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> que[maxSize],rear=<span class="number">0</span>,front=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> k;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line">rear=(rear+<span class="number">1</span>)%maxSize;</span><br><span class="line">que[rear]=v;</span><br><span class="line">ArcNode *p;</span><br><span class="line"><span class="keyword">while</span>(rear!=front)</span><br><span class="line">&#123;</span><br><span class="line">front=(front+<span class="number">1</span>)%maxSize;</span><br><span class="line">k=que[front];</span><br><span class="line">p=G-&gt;adjlist[k].firstarc;</span><br><span class="line"> <span class="keyword">while</span>(p!=<span class="literal">NULL</span>)</span><br><span class="line"> &#123;</span><br><span class="line"><span class="keyword">if</span>(Visit[p-&gt;adjvex]==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">content=G-&gt;adjlist[p-&gt;adjvex].data;</span><br><span class="line">printf(<span class="string">"%c"</span>,content);</span><br><span class="line">Visit[p-&gt;adjvex]=<span class="number">1</span>;</span><br><span class="line">rear=(rear+<span class="number">1</span>)%maxSize;</span><br><span class="line">que[rear]=p-&gt;adjvex;</span><br><span class="line">&#125;</span><br><span class="line">p=p-&gt;nextarc;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> main()</span><br><span class="line">&#123;</span><br><span class="line">AGraph ag=buildAGraph();</span><br><span class="line">DFS(&amp;ag,<span class="number">0</span>);</span><br><span class="line">printf(<span class="string">"\n"</span>);</span><br><span class="line">BFS(&amp;ag,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="结果如下："><a href="#结果如下：" class="headerlink" title="结果如下："></a>结果如下：</h1><p><img src="/images/BFS_result.png" alt="结果"></p><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><blockquote></blockquote>]]></content>
      
      <categories>
          
          <category> 数据结构 </category>
          
          <category> 图 </category>
          
          <category> 遍历 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c语言 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>迪杰斯特拉算法（邻接矩阵结构）</title>
      <link href="/blogs/f1a8c9e2345/"/>
      <url>/blogs/f1a8c9e2345/</url>
      <content type="html"><![CDATA[<blockquote><p>关于图的邻接矩阵结构的最短路径算法</p></blockquote><h1 id="构建的邻接表如下："><a href="#构建的邻接表如下：" class="headerlink" title="构建的邻接表如下："></a>构建的邻接表如下：</h1><p><img src="/images/Dijkstra.png" alt="构建的邻接表"><br><a id="more"></a></p><h1 id="源码如下："><a href="#源码如下：" class="headerlink" title="源码如下："></a>源码如下：</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#define maxSize 100</span><br><span class="line">#define INF 100</span><br><span class="line">typedef struct VertexType&#123;</span><br><span class="line">int no;</span><br><span class="line">char data;</span><br><span class="line">&#125;VertexType;</span><br><span class="line">typedef struct MGraph&#123;</span><br><span class="line">int edges[maxSize][maxSize];</span><br><span class="line">int n,e;</span><br><span class="line">VertexType vex[maxSize];</span><br><span class="line">&#125;MGraph;</span><br><span class="line">MGraph buildMGraph()</span><br><span class="line">&#123;</span><br><span class="line">MGraph mg;</span><br><span class="line">mg.n=7;</span><br><span class="line">mg.e=11;</span><br><span class="line">int old[7][7]=&#123;&#123;0,4,6,6,100,100,100&#125;,&#123;100,0,1,100,7,100,100&#125;,&#123;100,100,0,100,6,4,100&#125;,&#123;100,100,2,0,100,5,100&#125;,&#123;100,100,100,100,0,100,6&#125;,&#123;100,100,100,100,1,0,8&#125;,&#123;100,100,100,100,100,100,100&#125;&#125;;</span><br><span class="line">int i,j;</span><br><span class="line">for(i=0;i&lt;mg.n;i++)</span><br><span class="line">&#123;</span><br><span class="line">for(j=0;j&lt;mg.n;j++)</span><br><span class="line">&#123;</span><br><span class="line">mg.edges[i][j]=old[i][j];</span><br><span class="line">printf(&quot;%-6d&quot;,old[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">return mg;</span><br><span class="line">&#125;</span><br><span class="line">int*  Dijkstra(MGraph g,int v)</span><br><span class="line">&#123;</span><br><span class="line">int dist[maxSize],path[maxSize],set[maxSize];</span><br><span class="line">int i,j,min,k;</span><br><span class="line">for(i=0;i&lt;g.n;i++)</span><br><span class="line">&#123;</span><br><span class="line">dist[i]=g.edges[v][i];</span><br><span class="line">set[i]=0;</span><br><span class="line">path[i]=-1;</span><br><span class="line">if(g.edges[v][i]&lt;INF)</span><br><span class="line">&#123;</span><br><span class="line">path[i]=v;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">set[v]=1;</span><br><span class="line">path[v]=-1;</span><br><span class="line">for(i=0;i&lt;g.n-1;i++)</span><br><span class="line">&#123;</span><br><span class="line">min=INF;</span><br><span class="line">for(j=0;j&lt;g.n;j++)</span><br><span class="line">&#123;</span><br><span class="line">if(set[j]==0&amp;&amp;dist[j]&lt;min)</span><br><span class="line">&#123;</span><br><span class="line">min=dist[j];</span><br><span class="line">k=j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">set[k]=1;</span><br><span class="line">printf(&quot;%d\n&quot;,k);</span><br><span class="line">for(j=0;j&lt;g.n;j++)</span><br><span class="line">&#123;</span><br><span class="line">if(set[j]==0&amp;&amp;dist[j]&gt;dist[k]+g.edges[k][j])</span><br><span class="line">&#123;</span><br><span class="line">dist[j]=dist[k]+g.edges[k][j];</span><br><span class="line">path[j]=k;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">int (*p)[g.n]=&amp;path;</span><br><span class="line">return *p;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">void printfPath(int path[],int a)</span><br><span class="line">&#123;</span><br><span class="line">int stack[maxSize],top=-1;</span><br><span class="line">while(a!=-1)</span><br><span class="line">&#123;</span><br><span class="line">stack[++top]=a;</span><br><span class="line">a=path[a];</span><br><span class="line">&#125;</span><br><span class="line">stack[++top]=a;</span><br><span class="line">while(top!=-1)</span><br><span class="line">&#123;</span><br><span class="line">a=stack[top--];</span><br><span class="line">printf(&quot;%-5d&quot;,a);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">void main()</span><br><span class="line">&#123;</span><br><span class="line">MGraph mg=buildMGraph();</span><br><span class="line">        int *path=Dijkstra(mg,0);</span><br><span class="line"></span><br><span class="line">printfPath(path,6);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="结果如下："><a href="#结果如下：" class="headerlink" title="结果如下："></a>结果如下：</h1><p><img src="/images/Dijkstra_result.png" alt="结果"></p><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><blockquote></blockquote>]]></content>
      
      <categories>
          
          <category> 数据结构 </category>
          
          <category> 图 </category>
          
          <category> 最短路径算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c语言 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
